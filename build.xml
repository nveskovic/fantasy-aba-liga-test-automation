<project name="WebAppTest" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
    ================
    Build properties
    ================
    -->
	<property name="src.dir" location="src"/>
	<property name="build.dir" location="build"/>
	<property name="lib.dir" location="lib"/>
	<property name="classes.dir" location="${build.dir}/classes"/>
	<property name="ivy.reports.dir"  location="${build.dir}/ivy-reports"/>
	<property name="resources.dir" location="resources"/>
	<property name="test-output.dir" location="test-output"/>
	<property name="testng_suites.dir" location="${resources.dir}/testng_suites"/>
	<property name="data.dir" location="data"/>
	<property name="browser.binaries.folder" location="${data.dir}/drivers"/>
	<property name="config.dir" location="${resources.dir}/config"/>

	<!--
    ===========
    Build setup
    ===========
    -->
	<target name="init">

		<path id="lib.classpath">
			<fileset  dir="${lib.dir}" includes="**/*.jar"/>
		</path>
		<path id="project.classpath">
			<path refid="lib.classpath"/>
			<fileset dir="${classes.dir}" includes="**/*.class"/>
			<dirset dir="${classes.dir}"/>
			<dirset dir="${resources.dir}"/>
		</path>

		<ivy:settings file="${config.dir}/ivysettings.xml"/>
		<ivy:resolve/>
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${browser.binaries.folder}"/>
		<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]"/>

		<ivy:report todir='${ivy.reports.dir}' graph='false' xml='false'/>

		<ivy:cachepath pathid="compile.path" conf="compile"/>


		<!-- extract browser binaries from tar archive -->
		<unzip dest="${browser.binaries.folder}/linux">
			<fileset dir="${lib.dir}">
				<include name="chromedriver*linux*.zip" />
			</fileset>
			<patternset>
				<include name="chromedriver"/>
			</patternset>
			<mapper type="flatten"/>
		</unzip>
		<unzip dest="${browser.binaries.folder}/mac">
			<fileset dir="${lib.dir}">
				<include name="chromedriver*mac*.zip" />
			</fileset>
			<patternset>
				<include name="chromedriver"/>
			</patternset>
			<mapper type="flatten"/>
		</unzip>
		<unzip dest="${browser.binaries.folder}/win">
			<fileset dir="${lib.dir}">
				<include name="chromedriver*win*.zip" />
			</fileset>
			<patternset>
				<include name="chromedriver.exe"/>
			</patternset>
			<mapper type="flatten"/>
		</unzip>
		<unzip dest="${browser.binaries.folder}/win">
			<fileset dir="${lib.dir}">
				<include name="geckodriver*win*.zip" />
			</fileset>
			<patternset>
				<include name="geckodriver.exe"/>
			</patternset>
			<mapper type="flatten"/>
		</unzip>
		<gunzip dest="${browser.binaries.folder}/linux/geckodriver">
			<fileset dir="${lib.dir}">
				<include name="geckodriver*linux*.gz" />
			</fileset>
		</gunzip>
		<gunzip dest="${browser.binaries.folder}/mac/geckodriver">
			<fileset dir="${lib.dir}">
				<include name="geckodriver*mac*.gz" />
			</fileset>
		</gunzip>

		<chmod dir="${browser.binaries.folder}" perm="ugo+x" includes="**/*"/>

		<!-- delete dowloaded (not needed) archives -->
		<delete>
			<fileset dir="${lib.dir}" includes ="*.zip" />
			<fileset dir="${lib.dir}" includes ="*.gz" />
			<fileset dir="${lib.dir}" includes ="*.tar.bz2" />
		</delete>
	</target>

	<!--
    ===============
    Compile targets
    ===============
    -->
	<target name="compile" depends="init">
		<mkdir dir="${classes.dir}"/>
		<javac 
        	srcdir="${src.dir}" 
        	destdir="${classes.dir}" 
        	includeantruntime="false" 
        	debug="true" 
    		classpathref="project.classpath"
        	>
		</javac>
	</target>

	<!--
    =====================
    Build and run targets
    =====================
    -->
	<target name="build" depends="compile"/>

	<!--
    =============
    Clean targets
    =============
    -->
	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${lib.dir}"/>
		<delete dir="${classes.dir}"/>
		<delete dir="${test-output.dir}"/>
	</target>

	<target name="clean-all" depends="clean">
		<ivy:cleancache/>
	</target>

	<target name="run-testng" depends="compile">
		<taskdef name="testng" classname="org.testng.TestNGAntTask">
			<classpath refid="project.classpath"/>
		</taskdef>
		<testng
			dumpCommand="true"
			haltonfailure="true"
			classpathref="project.classpath"
		>
			<xmlfileset dir="${testng_suites.dir}" includes="${SUITE_FILE}"/>
		</testng>
	</target>
</project>
